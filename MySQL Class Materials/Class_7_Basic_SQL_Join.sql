 --Display all customers with out an order in year 2002. 
select * from sales.Customer --19185
select * from sales.SalesOrderHeader -- 31465
select * from sales.SalesTerritory

--select * --c.CustomerID, c.AccountNumber, c.CustomerType, st.[Name] as 'TerritoryName', st.CountryRegionCode
--from sales.Customer c
--inner join sales.SalesTerritory st on st.TerritoryID = c.TerritoryID
--left outer join sales.SalesOrderHeader sh on sh.CustomerID = c.CustomerID
--where sh.CustomerID is null and sh.OrderDate between '1/1/2002' and '12/31/2004'

select c.CustomerID, c.AccountNumber, c.CustomerType, st.[Name] as 'TerritoryName', st.CountryRegionCode
from sales.Customer c
inner join sales.SalesTerritory st on st.TerritoryID = c.TerritoryID
left outer join sales.SalesOrderHeader sh on sh.CustomerID = c.CustomerID
											and sh.OrderDate between '1/1/2002' and '12/31/2002'
where sh.CustomerID is null 

select c.CustomerID, c.AccountNumber, c.CustomerType, st.[Name] as 'TerritoryName', st.CountryRegionCode
from sales.Customer c
inner join sales.SalesTerritory st on st.TerritoryID = c.TerritoryID
left outer join sales.SalesOrderHeader sh on sh.CustomerID = c.CustomerID
											and sh.OrderDate between '1/1/2002' and '12/31/2003'
where sh.CustomerID is null 


select c.CustomerID, c.AccountNumber, c.CustomerType, st.[Name] as 'TerritoryName', st.CountryRegionCode
from sales.Customer c
inner join sales.SalesTerritory st on st.TerritoryID = c.TerritoryID
left outer join sales.SalesOrderHeader sh on sh.CustomerID = c.CustomerID
											and sh.OrderDate between '1/1/2002' and '12/31/2004'
where sh.CustomerID is null 

--------------Right Outer Join--------------------------------
--Display all products with out a product review. 
select * from Production.Product
select * from Production.ProductReview

select *
from  Production.ProductReview pr
right outer join Production.Product p on p.ProductID = pr.[ProductID]
where pr.ProductID is null 

select *
from  Production.Product p
left outer join Production.ProductReview pr on p.ProductID = pr.[ProductID]
where pr.ProductID is null 

---------------Self Join----------------------------------
--Display all employees with empid, employee title, manager title. 
select * from HumanResources.Employee

select emp.EmployeeID, emp.Title as 'Employee Title', mgr.Title as 'Manager Title'
from HumanResources.Employee emp 
inner join HumanResources.Employee mgr on emp.ManagerID = mgr.EmployeeID
order by emp.EmployeeID

select emp.EmployeeID, emp.Title as 'Employee Title', mgr.Title as 'Manager Title'
from HumanResources.Employee emp 
left outer join HumanResources.Employee mgr on emp.ManagerID = mgr.EmployeeID
order by emp.EmployeeID

-----------------------------Cross Join-----------------------------
--display all combination of sales Territory and sales person. 
select * from sales.SalesTerritory
select * from sales.SalesPerson

select sp.SalesPersonID, st.TerritoryID, st.[Group], st.CountryRegionCode
from sales.SalesPerson sp
cross join sales.SalesTerritory st
order by sp.SalesPersonID, st.TerritoryID

----------------------Group By --------------------------------
--Find total revenue generated by all sales. 
select sum(totaldue) as 'TotalRevenue'
from sales.SalesOrderHeader

--Display total revenue generated by each product 
select * from sales.SalesOrderDetail

select ProductID, 
	sum(linetotal) as 'TotalRevenue',
	sum(orderqty) as 'TotalUnitSold',
	count(*) as 'NumberofTimedSold',
	Max(UnitPrice) as 'MaxPrice',
	Avg(UnitPrice) as 'AvgPrice',
	Min(UnitPrice) as 'MinPrice'
from sales.SalesOrderDetail
group by ProductID
order by ProductID


select p.ProductID,
	sum(linetotal) as 'TotalRevenue',
	sum(orderqty) as 'TotalUnitSold',
	case 
		when sum(linetotal) is null then 0
		else count(*)
	end as 'NumberofTimedSold',
	Max(UnitPrice) as 'MaxPrice',
	Avg(UnitPrice) as 'AvgPrice',
	Min(UnitPrice) as 'MinPrice'
from Production.Product p 
left outer join sales.SalesOrderDetail sd on sd.ProductID = p.ProductID
group by p.ProductID
order by p.ProductID

select p.ProductID,
	isnull(sum(linetotal),0) as 'TotalRevenue',
	isnull(sum(orderqty),0) as 'TotalUnitSold',
	case 
		when sum(linetotal) is null then 0
		else count(*)
	end as 'NumberofTimedSold',
	isnull(Max(UnitPrice),0) as 'MaxPrice',
	isnull(Avg(UnitPrice),0) as 'AvgPrice',
	isnull(Min(UnitPrice),0) as 'MinPrice'
from Production.Product p 
left outer join sales.SalesOrderDetail sd on sd.ProductID = p.ProductID
group by p.ProductID
order by p.ProductID

--Display total revenue generated by each product for each offer. 
select sd.ProductID,p.[name]  as 'ProductName',  sd.SpecialOfferID, so.[Description] as 'SpecialOfferDesc',
	sum(linetotal) as 'TotalRevenue',
	sum(orderqty) as 'TotalUnitSold',
	count(*) as 'NumberofTimedSold',
	Max(UnitPrice) as 'MaxPrice',
	Avg(UnitPrice) as 'AvgPrice',
	Min(UnitPrice) as 'MinPrice'
from sales.SalesOrderDetail sd
inner join sales.SpecialOffer so on sd.SpecialOfferID = so.SpecialOfferID
inner join Production.Product p on p.ProductID = sd.ProductID
group by sd.ProductID,sd.SpecialOfferID,p.[name],so.[Description]
order by sd.ProductID,sd.SpecialOfferID

--Display total revenue generated by 'red color' product for each offer. 
select sd.ProductID,p.[name]  as 'ProductName',  sd.SpecialOfferID, so.[Description] as 'SpecialOfferDesc',
	sum(linetotal) as 'TotalRevenue',
	sum(orderqty) as 'TotalUnitSold',
	count(*) as 'NumberofTimedSold',
	Max(UnitPrice) as 'MaxPrice',
	Avg(UnitPrice) as 'AvgPrice',
	Min(UnitPrice) as 'MinPrice'
from sales.SalesOrderDetail sd
inner join sales.SpecialOffer so on sd.SpecialOfferID = so.SpecialOfferID
inner join Production.Product p on p.ProductID = sd.ProductID
where p.color = 'red'
group by sd.ProductID,sd.SpecialOfferID,p.[name],so.[Description]
order by sd.ProductID,sd.SpecialOfferID

--Display all red color products with total revenue generated for a special offer is less than $10000
select sd.ProductID,p.[name]  as 'ProductName',  sd.SpecialOfferID, so.[Description] as 'SpecialOfferDesc',
	sum(linetotal) as 'TotalRevenue',
	sum(orderqty) as 'TotalUnitSold',
	count(*) as 'NumberofTimedSold',
	Max(UnitPrice) as 'MaxPrice',
	Avg(UnitPrice) as 'AvgPrice',
	Min(UnitPrice) as 'MinPrice'
from sales.SalesOrderDetail sd
inner join sales.SpecialOffer so on sd.SpecialOfferID = so.SpecialOfferID
inner join Production.Product p on p.ProductID = sd.ProductID
where p.color = 'red' --and sum(linetotal) <= 10000
group by sd.ProductID,sd.SpecialOfferID,p.[name],so.[Description]
having sum(linetotal) <= 10000
order by sd.ProductID,sd.SpecialOfferID

select sd.ProductID,p.[name]  as 'ProductName',  sd.SpecialOfferID, so.[Description] as 'SpecialOfferDesc',
	sum(linetotal) as 'TotalRevenue',
	sum(orderqty) as 'TotalUnitSold',
	count(*) as 'NumberofTimedSold',
	Max(UnitPrice) as 'MaxPrice',
	Avg(UnitPrice) as 'AvgPrice',
	Min(UnitPrice) as 'MinPrice'
from sales.SalesOrderDetail sd
inner join sales.SpecialOffer so on sd.SpecialOfferID = so.SpecialOfferID
inner join Production.Product p on p.ProductID = sd.ProductID
--where p.color = 'red' --and sum(linetotal) <= 10000
group by sd.ProductID,sd.SpecialOfferID,p.[name],so.[Description],color
having color = 'red' and sum(linetotal) <= 10000
order by sd.ProductID,sd.SpecialOfferID


--SQL Execution Order
	--1.FROM
	--2.INNER
	--3.OUTER
	--4.WHERE
	--5.GROUP By
	--6.HAVING
	--7.SELECT
	--8.DISTINCT
	--9.ORDER BY 
	--10.TOP - Offset/Fetch


